package Commune.Dev.Services;

import Commune.Dev.Models.Roletype;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

/**
 * Service d'envoi d'emails asynchrone pour √©viter de bloquer les op√©rations principales
 */
@Service
public class AsyncEmailService {

    private static final Logger log = LoggerFactory.getLogger(AsyncEmailService.class);
    
    private final EmailService emailService;
    
    @Autowired
    public AsyncEmailService(EmailService emailService) {
        this.emailService = emailService;
    }

    /**
     * Envoie un email de mot de passe temporaire de mani√®re asynchrone
     */
    @Async
    public void sendTemporaryPasswordAsync(String to, String nom, String prenom, String temporaryPassword, Roletype role) {
        try {
            emailService.sendTemporaryPassword(to, nom, prenom, temporaryPassword, role);
            log.info("üöÄ Email de mot de passe temporaire envoy√© de mani√®re asynchrone √† : {}", to);
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'envoi asynchrone de l'email √† : {}", to, e);
            // En cas d'erreur, on peut impl√©menter une logique de retry ou de sauvegarde
        }
    }

    /**
     * Envoie une notification de modification de compte de mani√®re asynchrone
     */
    @Async
    public void sendAccountModificationNotificationAsync(String to, String nom, String prenom, String modification) {
        try {
            emailService.sendAccountModificationNotification(to, nom, prenom, modification);
            log.info("üöÄ Email de notification de modification envoy√© de mani√®re asynchrone √† : {}", to);
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'envoi asynchrone de notification √† : {}", to, e);
        }
    }

    /**
     * Envoie une confirmation de changement de mot de passe de mani√®re asynchrone
     */
    @Async
    public void sendPasswordChangeConfirmationAsync(String to, String nom, String prenom) {
        try {
            emailService.sendPasswordChangeConfirmation(to, nom, prenom);
            log.info("üöÄ Email de confirmation de mot de passe envoy√© de mani√®re asynchrone √† : {}", to);
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'envoi asynchrone de confirmation √† : {}", to, e);
        }
    }

    /**
     * Envoie une notification de statut de compte de mani√®re asynchrone
     */
    @Async
    public void sendAccountStatusNotificationAsync(String to, String nom, String prenom, boolean isActive) {
        try {
            emailService.sendAccountStatusNotification(to, nom, prenom, isActive);
            log.info("üöÄ Email de notification de statut envoy√© de mani√®re asynchrone √† : {} (Statut: {})", 
                    to, isActive ? "Activ√©" : "D√©sactiv√©");
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'envoi asynchrone de statut √† : {}", to, e);
        }
    }
}
